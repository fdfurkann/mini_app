import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Slider } from "@/components/ui/slider";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ChevronRight, ArrowLeft } from "lucide-react";
import { Link, useNavigate, useSearchParams } from "react-router-dom";
import { getApiKeys, getApiKeyById, updateApiKeySettings } from "@/services/api";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { useT } from '@/utils/locales';
import { toast } from "sonner";

const Settings = () => {
  const t = useT();
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const apiId = searchParams.get('id');
  const [autoTrade, setAutoTrade] = React.useState(false);
  const [leverage, setLeverage] = React.useState([20]); // Default 20x leverage
  const [entryAmount, setEntryAmount] = useState<string>("100"); // Default entry amount
  const [apiKeyName, setApiKeyName] = useState(t('settings.title'));
  const [tradeType, setTradeType] = useState("ISOLATED");
  const [entryType, setEntryType] = useState("percentage");
  const [singleTpValue, setSingleTpValue] = useState("50");
  const [stopLossType, setStopLossType] = useState("signal");
  const [customStopLoss, setCustomStopLoss] = useState("10");
  const [breakEvenLevel, setBreakEvenLevel] = useState("none");
  const [trailStopLevel, setTrailStopLevel] = useState("none");
  const [maxOrders, setMaxOrders] = useState("10");
  const [stopLossActionType, setStopLossActionType] = useState("none");
  const [specificLossPercentage, setSpecificLossPercentage] = useState("10");
  const [multipleTpValues, setMultipleTpValues] = useState({
    tp1: 20,
    tp2: 20,
    tp3: 20,
    tp4: 20,
    tp5: 20,
    tp6: 20,
    tp7: 20,
    tp8: 20,
    tp9: 20,
    tp10: 20
  });
  const [apiData, setApiData] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const loadApiDetails = async () => {
      if (!apiId) {
        setApiKeyName(t('settings.missingApiId'));
        return;
      }
      try {
        const parsedApiId = parseInt(apiId, 10);
        if (isNaN(parsedApiId)) {
          setApiKeyName(t('settings.invalidId'));
          return;
        }
        const apiKey = await getApiKeyById(parsedApiId);
        if (apiKey) {
          setApiData(apiKey);
          setApiKeyName(apiKey.api_name || `API ID: ${apiKey.id}`);
          setAutoTrade(apiKey.auto_trade === 1);
          setLeverage([typeof apiKey.leverage === 'string' ? parseInt(apiKey.leverage) : apiKey.leverage || 20]);
          setEntryAmount(apiKey.lotsize || "100");
          setTradeType(apiKey.margin_type || "ISOLATED");
          setMaxOrders(apiKey.max_orders ? apiKey.max_orders.toString() : "10");
          
          // Take Profit ayarlarını yükle
          if (apiKey.take_profit === 'custom') {
            setEntryType('fixed');
            setSingleTpValue(apiKey.percent_profit ? apiKey.percent_profit.toString() : "50");
          } else if (apiKey.take_profit === 'signal') {
            setEntryType('percentage');
          } else if (apiKey.take_profit === 'none') {
            setEntryType('none');
          } else {
            // Eski veriler için fallback - tp1-tp10 değerlerinden herhangi biri 0'dan büyükse percentage, yoksa none
            let hasTP = false;
            for (let i = 1; i <= 10; i++) {
              const tpValue = apiKey[`tp${i}`];
              if (tpValue && parseFloat(tpValue) > 0) {
                hasTP = true;
                break;
              }
            }
            setEntryType(hasTP ? 'percentage' : 'none');
          }
          
          // Stop Loss ayarlarını yükle
          if (apiKey.stop_loss_settings) {
            setStopLossType(apiKey.stop_loss_settings); // 'none', 'signal', 'custom'
          } else {
            setStopLossType(apiKey.stop_loss === 1 ? "custom" : "none");
          }
          setCustomStopLoss(apiKey.percent_loss ? apiKey.percent_loss.toString() : "10");
          setSpecificLossPercentage(apiKey.percent_loss ? apiKey.percent_loss.toString() : "10");
          setTrailStopLevel(apiKey.trail_stop ? apiKey.trail_stop.toString() : "none");
          
          // Stop Loss Action Type ayarlarını yükle
          if (apiKey.trail_stop === 1) {
            setStopLossActionType("trailStop");
            setTrailStopLevel(apiKey.break_even_level || 'none');
          } else if (apiKey.sl_tp_order === 1) {
            setStopLossActionType("sl_tp");
          } else if (apiKey.break_even === 1 && apiKey.break_even_level && apiKey.break_even_level !== 'none') {
            setStopLossActionType("maliyetineCek");
            setBreakEvenLevel(apiKey.break_even_level);
          } else {
            setStopLossActionType("none");
          }
          setMultipleTpValues({
            tp1: typeof apiKey.tp1 === 'string' ? parseInt(apiKey.tp1) : apiKey.tp1 || 20,
            tp2: typeof apiKey.tp2 === 'string' ? parseInt(apiKey.tp2) : apiKey.tp2 || 20,
            tp3: typeof apiKey.tp3 === 'string' ? parseInt(apiKey.tp3) : apiKey.tp3 || 20,
            tp4: typeof apiKey.tp4 === 'string' ? parseInt(apiKey.tp4) : apiKey.tp4 || 20,
            tp5: typeof apiKey.tp5 === 'string' ? parseInt(apiKey.tp5) : apiKey.tp5 || 20,
            tp6: typeof apiKey.tp6 === 'string' ? parseInt(apiKey.tp6) : apiKey.tp6 || 20,
            tp7: typeof apiKey.tp7 === 'string' ? parseInt(apiKey.tp7) : apiKey.tp7 || 20,
            tp8: typeof apiKey.tp8 === 'string' ? parseInt(apiKey.tp8) : apiKey.tp8 || 20,
            tp9: typeof apiKey.tp9 === 'string' ? parseInt(apiKey.tp9) : apiKey.tp9 || 20,
            tp10: typeof apiKey.tp10 === 'string' ? parseInt(apiKey.tp10) : apiKey.tp10 || 20
          });
        } else {
          setApiKeyName(t('settings.apiNotFound'));
        }
      } catch (error) {
        setApiKeyName(t('settings.loadingError'));
      }
    };
    loadApiDetails();
  }, [apiId]);

  const handleSave = async () => {
    if (!apiId) {
      toast("Hata: API anahtarı ID bulunamadı.");
      return;
    }

    setIsLoading(true);
    try {
      const parsedApiId = parseInt(apiId, 10);

      const settingsToUpdate: Record<string, any> = {
        auto_trade: autoTrade ? 1 : 0,
        lotsize: entryAmount,
        leverage: leverage[0],
        margin_type: tradeType,
        max_orders: Number(maxOrders),
        
        // Take Profit ayarları
        take_profit: entryType === 'none' ? 'none' : entryType === 'fixed' ? 'custom' : 'signal',
        tp1: multipleTpValues.tp1,
        tp2: multipleTpValues.tp2,
        tp3: multipleTpValues.tp3,
        tp4: multipleTpValues.tp4,
        tp5: multipleTpValues.tp5,
        tp6: multipleTpValues.tp6,
        tp7: multipleTpValues.tp7,
        tp8: multipleTpValues.tp8,
        tp9: multipleTpValues.tp9,
        tp10: multipleTpValues.tp10,
        
        // Stop Loss ayarları
        stop_loss: stopLossType === 'custom' ? 1 : 0,
        stop_loss_settings: stopLossType === 'custom' ? 'custom' : stopLossType === 'signal' ? 'signal' : 'none',
        
        // Zarar Durdur Aksiyon ayarları
        trail_stop: stopLossActionType === 'trailStop' ? 1 : 0,
        sl_tp_order: stopLossActionType === 'sl_tp' ? 1 : 0,
        break_even: stopLossActionType === 'maliyetineCek' ? 1 : 0,
        break_even_level: stopLossActionType === 'trailStop' ? trailStopLevel : 
                         stopLossActionType === 'maliyetineCek' ? breakEvenLevel : 'none',
        
        bot_room: apiData?.bot_room || 0
      };

      // Stop Loss yüzdesi
      if (stopLossType === 'custom') {
        settingsToUpdate.percent_loss = customStopLoss;
      } else {
        settingsToUpdate.percent_loss = null;
      }
      
      // Custom TP için percent_profit
      if (entryType === 'fixed') {
        settingsToUpdate.percent_profit = singleTpValue;
      } else {
        settingsToUpdate.percent_profit = null;
      }

      await updateApiKeySettings(parsedApiId, settingsToUpdate);
      toast("Ayarlar başarıyla kaydedildi.");
    } catch (error: any) {
      console.error("Ayarlar kaydedilirken hata:", error);
      toast("Ayarlar kaydedilirken hata: " + (error.message || error));
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-none">
      <div className="flex items-center gap-2 mb-6">
        <Button variant="ghost" size="sm" onClick={() => navigate(-1)}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-2xl font-bold">{t('settings.title')} {apiKeyName}</h1>
      </div>

      <Card>
        <CardContent className="space-y-6 pt-6">
          {/* Otomatik Trading Switch */}
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.autoTrade')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.autoTradeDescription')}</p>
            </div>
            <div className="flex justify-end flex-1">
              <Switch checked={autoTrade} onCheckedChange={setAutoTrade} />
            </div>
          </div>

          {/* İşleme Giriş Miktarı */}
          <div className="flex flex-col md:flex-row md:items-start justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.entryAmount')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.entryAmountDescription')}</p>
            </div>
            <div className="flex-1">
              <div className="flex items-center gap-2">
                <Input
                  type="number"
                  value={entryAmount}
                  onChange={(e) => setEntryAmount(e.target.value)}
                  placeholder={t('settings.entryAmountPlaceholder')}
                  className="flex-grow"
                  min="0"
                />
                <span className="text-sm font-medium text-muted-foreground">{t('settings.usdt')}</span>
              </div>
              {/* Info Text Accordion */}
              <Accordion type="single" collapsible className="w-full mt-2">
                <AccordionItem value="item-1">
                  <AccordionTrigger className="text-xs font-semibold text-muted-foreground hover:no-underline py-1">
                    {t('settings.entryAmountQuestion')}
                  </AccordionTrigger>
                  <AccordionContent className="text-xs text-muted-foreground space-y-1 pt-1">
                    <p>{t('settings.entryAmountExplanation1')}</p>
                    <p>{t('settings.entryAmountExplanation2')}</p>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </div>
          </div>

          {/* Kaldıraç Slider */}
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.leverage')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.leverageDescription')}</p>
            </div>
            <div className="flex-1">
              <Slider
                value={leverage}
                onValueChange={setLeverage}
                max={25}
                min={1}
                step={1}
              />
              <div className="flex justify-between mt-1">
                <span className="text-sm text-muted-foreground">{t('settings.safe')}</span>
                <span className="text-sm font-medium">{leverage[0]}x</span>
                <span className="text-sm text-muted-foreground">{t('settings.risky')}</span>
              </div>
            </div>
          </div>

          {/* İşlem Türü */}
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.tradeType')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.tradeTypeDescription')}</p>
            </div>
            <div className="flex-1">
              <div className="grid grid-cols-2 gap-2">
                <Button
                  variant={tradeType === "ISOLATED" ? "default" : "outline"}
                  onClick={() => setTradeType("ISOLATED")}
                  className="w-full"
                >
                  {t('settings.isolated')}
                </Button>
                <Button
                  variant={tradeType === "CROSS" ? "default" : "outline"}
                  onClick={() => setTradeType("CROSS")}
                  className="w-full"
                >
                  {t('settings.cross')}
                </Button>
              </div>
            </div>
          </div>

          {/* Kar Al İşlem Ayarları */}
          <div className="flex flex-col md:flex-row md:items-start justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.profitTradeSettings')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.profitTradeSettingsDescription')}</p>
            </div>
            <div className="flex-1 space-y-4">
              <Select value={entryType} onValueChange={setEntryType}>
                <SelectTrigger>
                  <SelectValue placeholder={t('settings.selectEntryType')} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">{t('settings.closed')}</SelectItem>
                  <SelectItem value="percentage">{t('settings.percentage')}</SelectItem>
                  <SelectItem value="fixed">{t('settings.fixedAmount')}</SelectItem>
                </SelectContent>
              </Select>

              {/* Koşullu Renderlama: Hiçbiri seçilmediyse göster */}
              {entryType !== 'none' && (
                entryType === "percentage" ? (
                  <div className="space-y-4">
                    {Array.from({length: 10}, (_, i) => (
                      <div key={`tp${i+1}`} className="flex items-center justify-between gap-2">
                        <Label className="w-20">{t(`settings.tp${i+1}`)}</Label>
                        <div className="flex-1">
                          <Slider
                            value={[multipleTpValues[`tp${i+1}`]]}
                            onValueChange={(newValue) => setMultipleTpValues(prev => ({
                              ...prev,
                              [`tp${i+1}`]: newValue[0]
                            }))}
                            max={100}
                            min={0}
                            step={1}
                          />
                        </div>
                        <span className="w-12 text-right text-sm font-medium">{multipleTpValues[`tp${i+1}`]}{t('settings.percentSymbol')}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="flex items-center justify-between gap-2">
                    <Label>{t('settings.tpLevel')}</Label>
                    <div className="relative flex-1">
                      <span className="absolute left-2 top-1/2 transform -translate-y-1/2">{t('settings.percentSymbol')}</span>
                      <Input
                        type="number"
                        value={singleTpValue}
                        onChange={(e) => setSingleTpValue(e.target.value)}
                        className="pl-6"
                        min="0"
                        max="100"
                      />
                    </div>
                  </div>
                )
              )}
            </div>
          </div>

          {/* Stoploss İşlem Ayarları (Eski Zarar Durdur) */}
          <div className="flex flex-col md:flex-row md:items-start justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.stoplossTradeSettings')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.stoplossTradeSettingsDescription')}</p>
            </div>
            <div className="flex-1 space-y-4">
              <Select value={stopLossType} onValueChange={setStopLossType}>
                <SelectTrigger>
                  <SelectValue placeholder={t('settings.selectStopLossStrategy')} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">{t('settings.closed')}</SelectItem>
                  <SelectItem value="signal">{t('settings.useSignalSL')}</SelectItem>
                  <SelectItem value="custom">{t('settings.customStopLoss')}</SelectItem>
                </SelectContent>
              </Select>

              {stopLossType === "custom" && (
                <>
                  <div className="flex items-center justify-between gap-2">
                    <Label>{t('settings.customStopLossInput')}</Label>
                    <div className="relative flex-1">
                      <span className="absolute left-2 top-1/2 transform -translate-y-1/2">{t('settings.percentSymbol')}</span>
                      <Input
                        type="number"
                        value={customStopLoss}
                        onChange={(e) => setCustomStopLoss(e.target.value)}
                        className="pl-6"
                        min="0"
                        max="100"
                      />
                    </div>
                  </div>
                  {/* Bilgilendirme Metni */}
                  <p className="text-xs text-muted-foreground mt-1">
                    {t('settings.customStopLossHelp')}
                  </p>
                </>
              )}
            </div>
          </div>

          {/* Zarar Durdur İşlem Ayarları (Yeni Dropdown) */}
          <div className="flex flex-col md:flex-row md:items-start justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.stopLossActionSettings')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.stopLossActionDescription')}</p>
            </div>
            <div className="flex-1 space-y-4">
              <Select value={stopLossActionType} onValueChange={setStopLossActionType}>
                <SelectTrigger>
                  <SelectValue placeholder={t('settings.selectAction')} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">{t('settings.closed')}</SelectItem>
                  <SelectItem value="trailStop">{t('settings.trailStopAction')}</SelectItem>
                  <SelectItem value="maliyetineCek">{t('settings.costWithdrawAction')}</SelectItem>
                  <SelectItem value="belirliZarar">{t('settings.specificLossAction')}</SelectItem>
                </SelectContent>
              </Select>

              {/* Belirli Zararda Kapat Input */}
              {stopLossActionType === 'belirliZarar' && (
                <>
                  <div className="flex items-center justify-between gap-2 mt-2">
                    <Label>{t('settings.specificLossLabel')}</Label>
                    <div className="relative flex-1">
                      <Input
                        type="number"
                        value={specificLossPercentage}
                        onChange={(e) => setSpecificLossPercentage(e.target.value)}
                        className="pr-8"
                        min="0"
                        max="100"
                      />
                      <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-muted-foreground">{t('settings.percentSymbol')}</span>
                    </div>
                  </div>
                  {/* Açıklama Metni Accordion */}
                  <Accordion type="single" collapsible className="w-full mt-2">
                    <AccordionItem value="item-1">
                      <AccordionTrigger className="text-xs font-semibold text-muted-foreground hover:no-underline py-1">
                        {t('settings.specificLossQuestion')}
                      </AccordionTrigger>
                      <AccordionContent className="text-xs text-muted-foreground space-y-1 pt-1">
                        <p>{t('settings.specificLossExplanation')}</p>
                      </AccordionContent>
                    </AccordionItem>
                  </Accordion>
                </>
              )}
            </div>
          </div>

          {/* Maliyetine Çek (Koşullu) */}
          {stopLossActionType === 'maliyetineCek' && (
            <div className="flex flex-col md:flex-row md:items-start justify-between gap-4">
              <div className="space-y-0.5 flex-1">
                <Label>{t('settings.costWithdraw')}</Label>
                <p className="text-sm text-muted-foreground">{t('settings.costWithdrawDescription')}</p>
              </div>
              <div className="flex-1">
                <Select value={breakEvenLevel} onValueChange={setBreakEvenLevel}>
                  <SelectTrigger>
                    <SelectValue placeholder={t('settings.selectLevel')} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">{t('settings.none')}</SelectItem>
                    <SelectItem value="tp1">{t('settings.tp1')}</SelectItem>
                    <SelectItem value="tp2">{t('settings.tp2')}</SelectItem>
                    <SelectItem value="tp3">{t('settings.tp3')}</SelectItem>
                    <SelectItem value="tp4">{t('settings.tp4')}</SelectItem>
                    <SelectItem value="tp5">{t('settings.tp5')}</SelectItem>
                  </SelectContent>
                </Select>
                {/* Açıklama Metni Accordion */}
                <Accordion type="single" collapsible className="w-full mt-2">
                  <AccordionItem value="item-1">
                    <AccordionTrigger className="text-xs font-semibold text-muted-foreground hover:no-underline py-1">
                      {t('settings.costWithdrawQuestion')}
                    </AccordionTrigger>
                    <AccordionContent className="text-xs text-muted-foreground space-y-1 pt-1">
                      <p>{t('settings.costWithdrawExplanation1')}</p>
                      <p>{t('settings.costWithdrawExplanation2')}</p>
                      <p>{t('settings.costWithdrawExplanation3')}</p>
                      <p>{t('settings.costWithdrawExplanation4')}</p>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
          )}

          {/* TrailStop (Koşullu) */}
          {stopLossActionType === 'trailStop' && (
            <div className="flex flex-col md:flex-row md:items-start justify-between gap-4">
              <div className="space-y-0.5 flex-1">
                <Label>{t('settings.trailStop')}</Label>
                <p className="text-sm text-muted-foreground">{t('settings.trailStopDescription')}</p>
              </div>
              <div className="flex-1">
                <Select value={trailStopLevel} onValueChange={setTrailStopLevel}>
                  <SelectTrigger>
                    <SelectValue placeholder={t('settings.selectLevel')} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">{t('settings.none')}</SelectItem>
                    <SelectItem value="tp1">{t('settings.tp1')}</SelectItem>
                    <SelectItem value="tp2">{t('settings.tp2')}</SelectItem>
                    <SelectItem value="tp3">{t('settings.tp3')}</SelectItem>
                    <SelectItem value="tp4">{t('settings.tp4')}</SelectItem>
                    <SelectItem value="tp5">{t('settings.tp5')}</SelectItem>
                  </SelectContent>
                </Select>
                {/* Açıklama Metni Accordion */}
                <Accordion type="single" collapsible className="w-full mt-2">
                  <AccordionItem value="item-1">
                    <AccordionTrigger className="text-xs font-semibold text-muted-foreground hover:no-underline py-1">
                      {t('settings.trailStopQuestion')}
                    </AccordionTrigger>
                    <AccordionContent className="text-xs text-muted-foreground space-y-1 pt-1">
                      <p>{t('settings.trailStopExplanation')}</p>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
          )}

          {/* Maks Emir Miktarı */}
          <div className="flex flex-col md:flex-row md:items-start justify-between gap-4">
            <div className="space-y-0.5 flex-1">
              <Label>{t('settings.maxOrders')}</Label>
              <p className="text-sm text-muted-foreground">{t('settings.maxOrdersDescription')}</p>
            </div>
            <div className="flex-1">
              <Input
                type="number"
                value={maxOrders}
                onChange={(e) => setMaxOrders(e.target.value)}
                min="1"
                max="100"
              />
            </div>
          </div>

          {/* Kaydet Butonu */}
          <div className="flex justify-end mt-6">
            <Button 
              onClick={handleSave} 
              disabled={isLoading}
              className="w-full md:w-auto"
            >
              {isLoading ? t('settings.saving') : t('settings.save')}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Settings;
